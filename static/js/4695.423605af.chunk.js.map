{"version":3,"file":"static/js/4695.423605af.chunk.js","mappings":"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","sources":["webpack://ctic/./src/@crema/core/AppCard/index.module.scss?c1e2","@crema/core/AppCard/index.js","@crema/core/AppConfirmationModal/index.js","@crema/core/AppInfoView/index.js","@crema/core/AppRowContainer/index.js","@crema/core/AppsContainer/AppsContent.js","@crema/core/AppsContainer/AppSidebar.js","@crema/core/AppsContainer/index.js","webpack://ctic/./src/pages/apps/ScrumBoard/BoardDetail/List/AddCard/index.module.scss?cbef","pages/apps/ScrumBoard/BoardDetail/List/AddCard/CardHeader.js","pages/apps/ScrumBoard/BoardDetail/List/AddCard/CardAttachments.js","pages/apps/ScrumBoard/BoardDetail/List/AddCard/CardCheckedList.js","pages/apps/ScrumBoard/BoardDetail/List/AddCard/CardComments.js","pages/apps/ScrumBoard/BoardDetail/List/AddCard/AddCardForm.js","pages/apps/ScrumBoard/BoardDetail/List/AddCard/index.js","webpack://ctic/./src/pages/apps/ScrumBoard/BoardDetail/List/BoardCard/index.module.scss?4a89","pages/apps/ScrumBoard/BoardDetail/List/BoardCard/Members.js","pages/apps/ScrumBoard/BoardDetail/List/BoardCard/Labels.js","pages/apps/ScrumBoard/BoardDetail/List/BoardCard/index.js","webpack://ctic/./src/pages/apps/ScrumBoard/BoardDetail/List/index.module.scss?6a87","pages/apps/ScrumBoard/BoardDetail/List/ListHeader.js","pages/apps/ScrumBoard/BoardDetail/List/AddCardButton.js","webpack://ctic/./src/pages/apps/ScrumBoard/BoardDetail/index.module.scss?63a8","pages/apps/ScrumBoard/BoardDetail/AddNewList.js","pages/apps/ScrumBoard/BoardDetail/NewListButton.js","pages/apps/ScrumBoard/BoardDetail/BoardDetailView.js","pages/apps/ScrumBoard/BoardDetail/index.js","webpack://ctic/./src/pages/apps/ScrumBoard/BoardList/index.module.scss?8b6a","pages/apps/ScrumBoard/BoardList/AddNewBoard.js","pages/apps/ScrumBoard/BoardList/BoardItem.js","pages/apps/ScrumBoard/BoardList/AddBoardButton.js","pages/apps/ScrumBoard/BoardList/index.js","pages/apps/ScrumBoard/index.js","webpack://ctic/./src/@crema/core/AppRowContainer/index.module.scss?e727","webpack://ctic/./src/@crema/core/AppsContainer/index.module.scss?3797"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"AppCard_card__lJ6Uc\",\"heightFull\":\"AppCard_heightFull__T8kun\",\"cardBody\":\"AppCard_cardBody__Yq-vX\",\"cardHeader\":\"AppCard_cardHeader__Y+R+4\",\"cardTitle\":\"AppCard_cardTitle__HaekO\",\"action\":\"AppCard_action__sd-8L\",\"cardFooter\":\"AppCard_cardFooter__qAyRn\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport styles from './index.module.scss';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nconst AppCard = ({\r\n  title,\r\n  footer,\r\n  children,\r\n  className,\r\n  titleClass,\r\n  actionClass,\r\n  footerClass,\r\n  cardBodyClass,\r\n  cardHeaderClass,\r\n  action,\r\n  heightFull,\r\n  cardImg,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <Card\r\n      className={clsx(\r\n        styles.card,\r\n        heightFull ? styles.heightFull : '',\r\n        className,\r\n      )}\r\n      title={title}\r\n      {...rest}>\r\n      {cardImg ? <Card.Img variant='top' src={cardImg} /> : null}\r\n      {title || action ? (\r\n        <Card.Header className={clsx(styles.cardHeader, cardHeaderClass)}>\r\n          {typeof title === 'object' ? (\r\n            title\r\n          ) : (\r\n            <Card.Title\r\n              className={clsx(\r\n                styles.cardTitle,\r\n                'mb-0 text-truncate',\r\n                titleClass,\r\n              )}>\r\n              {title}\r\n            </Card.Title>\r\n          )}\r\n          {typeof action === 'object' ? (\r\n            action\r\n          ) : (\r\n            <a\r\n              className={clsx(\r\n                styles.action,\r\n                'text-decoration-none ms-1',\r\n                actionClass,\r\n              )}\r\n              href='#'>\r\n              {action}\r\n            </a>\r\n          )}\r\n        </Card.Header>\r\n      ) : null}\r\n      <Card.Body className={clsx(styles.cardBody, cardBodyClass)}>\r\n        {children}\r\n      </Card.Body>\r\n      {footer ? (\r\n        <Card.Footer className={clsx(styles.cardFooter, footerClass)}>\r\n          {footer}\r\n        </Card.Footer>\r\n      ) : null}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AppCard;\r\n\r\nAppCard.propTypes = {\r\n  action: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\r\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cardImg: PropTypes.string,\r\n  titleClass: PropTypes.string,\r\n  actionClass: PropTypes.string,\r\n  footerClass: PropTypes.string,\r\n  cardBodyClass: PropTypes.string,\r\n  cardHeaderClass: PropTypes.string,\r\n  heightFull: PropTypes.bool,\r\n};\r\n\r\nAppCard.defaultProps = {};\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport {Modal, Button} from 'react-bootstrap';\r\n\r\nconst AppConfirmationModal = ({open, onDeny, onConfirm, modalTitle, paragraph, title}) => {\r\n  return (\r\n    <Modal show={open} onHide={() => onDeny(false)} centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{modalTitle}</Modal.Title>\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <p>{paragraph}</p>\r\n      </Modal.Body>\r\n\r\n      <Modal.Footer>\r\n        <Button variant='outline-primary' onClick={() => onDeny(false)}>\r\n          Cancel\r\n        </Button>\r\n        <Button variant='primary' onClick={onConfirm}>\r\n          Ok\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nAppConfirmationModal.propTypes = {\r\n  modalTitle: PropTypes.any.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  onDeny: PropTypes.func.isRequired,\r\n  paragraph: PropTypes.any,\r\n  onConfirm: PropTypes.func.isRequired,\r\n};\r\n\r\nAppConfirmationModal.defaultProps = {\r\n  paragraph: 'Are you sure you want to delete?',\r\n};\r\nexport default AppConfirmationModal;\r\n","import React, {useEffect} from 'react';\r\n// import {message} from 'react-bootstrap';\r\nimport AppLoader from '@crema/core/AppLoader';\r\nimport {useSelector} from 'react-redux';\r\n// import {useDispatch} from 'react-redux';\r\n// import {hideMessage} from '../../../redux/actions';\r\n\r\nconst AppInfoView = () => {\r\n  const {loading, error, displayMessage} = useSelector(({common}) => common);\r\n  // const dispatch = useDispatch();\r\n  //\r\n  // useEffect(() => {\r\n  //   if (error) {\r\n  //     message.error(error);\r\n  //     dispatch(hideMessage());\r\n  //   }\r\n  // }, [error]);\r\n  //\r\n  // useEffect(() => {\r\n  //   if (displayMessage) {\r\n  //     message.success(displayMessage);\r\n  //     dispatch(hideMessage());\r\n  //   }\r\n  // }, [displayMessage]);\r\n\r\n  return <>{loading ? <AppLoader /> : null}</>;\r\n};\r\n\r\nexport default AppInfoView;\r\n","import React from 'react';\r\nimport styles from './index.module.scss';\r\nimport PropTypes from 'prop-types';\r\nimport AppAnimateGroup from '../AppAnimateGroup';\r\nimport {Row} from 'react-bootstrap';\r\n\r\nconst AppRow = (props) => <Row className={styles.row} {...props} />;\r\n\r\nconst AppRowContainer = ({children, ...others}) => {\r\n  return (\r\n    <AppAnimateGroup\r\n      animateStyle={{flexDirection: 'row'}}\r\n      component={AppRow}\r\n      type='bottom'\r\n      ease='easeInOutQuart'\r\n      height='auto'\r\n      {...others}>\r\n      {children}\r\n    </AppAnimateGroup>\r\n  );\r\n};\r\n\r\nexport default AppRowContainer;\r\nAppRowContainer.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport AppScrollbar from '../AppScrollbar';\r\nimport styles from './index.module.scss';\r\n\r\nconst AppsContent = (props) => {\r\n  const {children, isDetailView, fullView} = props;\r\n\r\n  return (\r\n    <AppScrollbar\r\n      className={clsx(\r\n        styles.appsContentContainer,\r\n        'd-flex flex-column',\r\n        isDetailView && styles.isDetailView,\r\n        fullView && styles.fullView,\r\n      )}>\r\n      {children}\r\n    </AppScrollbar>\r\n  );\r\n};\r\n\r\nexport default AppsContent;\r\n\r\nAppsContent.defaultProps = {isDetailView: false};\r\n\r\nAppsContent.propTypes = {\r\n  children: PropTypes.node,\r\n  isDetailView: PropTypes.bool,\r\n  fullView: PropTypes.bool,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './index.module.scss';\r\nimport {Card, Offcanvas} from 'react-bootstrap';\r\nimport clsx from 'clsx';\r\n\r\nconst AppSidebar = (props) => {\r\n  const {isAppDrawerOpen, setAppDrawerOpen, sidebarContent} = props;\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        styles.appsSidebar,\r\n        'd-flex flex-column',\r\n      )}>\r\n      <Offcanvas\r\n        className={styles.appsOffcanvas}\r\n        closeIcon={null}\r\n        show={isAppDrawerOpen}\r\n        onHide={() => setAppDrawerOpen(!isAppDrawerOpen)}>\r\n        <Offcanvas.Body className='p-0'>\r\n        {sidebarContent}\r\n        </Offcanvas.Body>\r\n      </Offcanvas>\r\n      <Card className={clsx(styles.card, 'd-none h-100 flex-lg-grow-1 d-lg-flex flex-lg-column')}>\r\n        {sidebarContent}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppSidebar;\r\nAppSidebar.propTypes = {\r\n  footer: PropTypes.node,\r\n  setAppDrawerOpen: PropTypes.func,\r\n  sidebarContent: PropTypes.node,\r\n  isAppDrawerOpen: PropTypes.bool,\r\n  fullView: PropTypes.bool,\r\n};\r\n","import React, {useState} from 'react';\r\nimport AppInfoView from '@crema/core/AppInfoView';\r\nimport PropTypes from 'prop-types';\r\nimport AppSidebar from './AppSidebar';\r\nimport clsx from 'clsx';\r\nimport styles from './index.module.scss';\r\nimport QueueAnim from 'rc-queue-anim';\r\nimport {useLayoutContext} from '../../utility/AppContextProvider/LayoutContextProvider';\r\nimport {Button, Card} from 'react-bootstrap';\r\nimport {AiOutlineMenu} from 'react-icons/ai';\r\n\r\nconst AppsContainer = (props) => {\r\n  const [isAppDrawerOpen, setAppDrawerOpen] = useState(false);\r\n  const {footer, navStyle} = useLayoutContext();\r\n  const {title, noContentAnimation, sidebarContent, fullView, children} = props;\r\n  return (\r\n    <div className={clsx(styles.appsWrap, 'd-flex flex-column')}>\r\n      <div\r\n        className={clsx(styles.appsWrapHeader, 'd-flex align-items-center', {\r\n          appsWrapHeaderFull: fullView,\r\n        })}>\r\n        {fullView ? null : (\r\n          <Button\r\n            className={styles.menuBtn}\r\n            onClick={() => setAppDrawerOpen(!isAppDrawerOpen)}>\r\n            <AiOutlineMenu />\r\n          </Button>\r\n        )}\r\n        <QueueAnim style={{zIndex: 3, overflow: 'hidden'}} type='scale'>\r\n          <h2 className='text-truncate' key='title'>\r\n            {title}\r\n          </h2>\r\n        </QueueAnim>\r\n      </div>\r\n\r\n      <div className={clsx(styles.appsContainer, 'd-flex apps-container')}>\r\n        {sidebarContent ? (\r\n          <QueueAnim\r\n            style={{zIndex: 3}}\r\n            type={props.type ? props.type : 'left'}>\r\n            <AppSidebar\r\n              isAppDrawerOpen={isAppDrawerOpen}\r\n              setAppDrawerOpen={setAppDrawerOpen}\r\n              footer={footer}\r\n              fullView={fullView}\r\n              navStyle={navStyle}\r\n              sidebarContent={sidebarContent}\r\n              key='sidebar'\r\n            />\r\n          </QueueAnim>\r\n        ) : null}\r\n        <div\r\n          className={clsx(\r\n            styles.appsMainContent,\r\n            fullView ? styles.appsMainContentFull : '',\r\n            'd-flex flex-column',\r\n          )}>\r\n          {noContentAnimation ? (\r\n            <Card\r\n              key='content'\r\n              className={clsx(\r\n                styles.card,\r\n                'flex-grow-1 d-flex flex-column h-100 overflow-hidden',\r\n              )}\r\n              style={{\r\n                ...props.cardStyle,\r\n              }}>\r\n              {children}\r\n            </Card>\r\n          ) : (\r\n            <QueueAnim\r\n              type={props.type ? props.type : 'right'}\r\n              style={{minHeight: '100%'}}>\r\n              <Card\r\n                key='content'\r\n                className={clsx(\r\n                  styles.card,\r\n                  'flex-grow-1 d-flex flex-column h-100 overflow-hidden',\r\n                )}\r\n                style={{\r\n                  ...props.cardStyle,\r\n                }}>\r\n                {children}\r\n              </Card>\r\n            </QueueAnim>\r\n          )}\r\n\r\n          <AppInfoView />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppsContainer;\r\n\r\nAppsContainer.defaultProps = {\r\n  title: '',\r\n  noContentAnimation: false,\r\n};\r\n\r\nAppsContainer.propTypes = {\r\n  title: PropTypes.string,\r\n  cardStyle: PropTypes.object,\r\n  noContentAnimation: PropTypes.bool,\r\n  sidebarContent: PropTypes.node,\r\n  fullView: PropTypes.bool,\r\n  children: PropTypes.node,\r\n  type: PropTypes.any,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"scrumBoardAddCardFormScroll\":\"AddCard_scrumBoardAddCardFormScroll__rLbip\",\"addCardDrawer\":\"AddCard_addCardDrawer__ei8nU\",\"scrumBoardAddCardFormContent\":\"AddCard_scrumBoardAddCardFormContent__WF2P4\",\"scrumBoardAddCardFormFooter\":\"AddCard_scrumBoardAddCardFormFooter__vAnuU\",\"scrumBoardAttachmentTitle\":\"AddCard_scrumBoardAttachmentTitle__t6MqX\",\"scrumBoardAttachment\":\"AddCard_scrumBoardAttachment__nSQ2v\",\"scrumBoardAttachmentItems\":\"AddCard_scrumBoardAttachmentItems__PujIK\",\"scrumBoardAttachmentCard\":\"AddCard_scrumBoardAttachmentCard__1+VwC\",\"scrumBoardAttachmentItemsAction\":\"AddCard_scrumBoardAttachmentItemsAction__DSDWu\",\"scrumBoardAttachmentImg\":\"AddCard_scrumBoardAttachmentImg__XEw9i\",\"scrumBoardAttachmentContent\":\"AddCard_scrumBoardAttachmentContent__QxPaB\",\"scrumBoardAttachmentFileName\":\"AddCard_scrumBoardAttachmentFileName__yL4j2\",\"scrumBoardAttachmentFileTime\":\"AddCard_scrumBoardAttachmentFileTime__lCQCf\",\"scrum-board-card-check-list\":\"AddCard_scrum-board-card-check-list__23dn+\",\"scrumBoardCardCheckListHeader\":\"AddCard_scrumBoardCardCheckListHeader__W6azs\",\"scrumBoardCardCheckListItem\":\"AddCard_scrumBoardCardCheckListItem__ZWYmx\",\"scrumBoardCardCheckListItemCheckBox\":\"AddCard_scrumBoardCardCheckListItemCheckBox__SLdQZ\",\"scrumBoardCardComment\":\"AddCard_scrumBoardCardComment__OveS+\",\"scrumBoardCardCommentItem\":\"AddCard_scrumBoardCardCommentItem__ejr91\",\"scrumBoardCardCommentItemPrevious\":\"AddCard_scrumBoardCardCommentItemPrevious__fKj5I\",\"scrumBoardCardCommentItemUserDate\":\"AddCard_scrumBoardCardCommentItemUserDate__H2uY2\",\"scrumBoardCardCommentItemUserAvatar\":\"AddCard_scrumBoardCardCommentItemUserAvatar__r8kVK\",\"scrumBoardCardCommentItemUserContent\":\"AddCard_scrumBoardCardCommentItemUserContent__XfY1M\",\"scrumBoardCardCommentArea\":\"AddCard_scrumBoardCardCommentArea__DP-qq\",\"scrumBoardCardCommentView\":\"AddCard_scrumBoardCardCommentView__62lE+\",\"scrumBoardCardCommentScroll\":\"AddCard_scrumBoardCardCommentScroll__PLo0v\",\"scrumBoardCardCommentTitle\":\"AddCard_scrumBoardCardCommentTitle__7zpab\",\"scrum-board-card-comment-item-user-name\":\"AddCard_scrum-board-card-comment-item-user-name__2CGiC\",\"drawerHeaderWrapper\":\"AddCard_drawerHeaderWrapper__oup5u\",\"scrumBoardCardHeader\":\"AddCard_scrumBoardCardHeader__mEtXT\",\"scrum-board-card-header-action\":\"AddCard_scrum-board-card-header-action__qmvyd\",\"scrumBoardCardCommentFooter\":\"AddCard_scrumBoardCardCommentFooter__1HBQb\",\"btnCircle\":\"AddCard_btnCircle__jEfM8\",\"scrumBoardCardCommentTextArea\":\"AddCard_scrumBoardCardCommentTextArea__yaY2x\",\"multipleSelect\":\"AddCard_multipleSelect__DEfqw\",\"avatar\":\"AddCard_avatar__gBTqA\",\"multipleSelectName\":\"AddCard_multipleSelectName__7nJcq\"};","import React from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport PropTypes from 'prop-types';\r\nimport {IoMdAttach} from 'react-icons/io';\r\nimport {AiOutlineDelete} from 'react-icons/ai';\r\nimport AppIconButton from '@crema/core/AppIconBtn';\r\nimport clsx from 'clsx';\r\nimport styles from './index.module.scss';\r\n\r\nconst CardHeader = (props) => {\r\n  const {onClickDeleteIcon, board, list, onAddAttachments} = props;\r\n  const {getRootProps, getInputProps} = useDropzone({\r\n    accept: 'image/*',\r\n    onDrop: (acceptedFiles) => {\r\n      const files = acceptedFiles.map((file) => {\r\n        return {\r\n          id: Math.floor(Math.random() * 10000),\r\n          file,\r\n          preview: URL.createObjectURL(file),\r\n        };\r\n      });\r\n      onAddAttachments(files);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        styles.scrumBoardCardHeader,\r\n        'd-flex align-items-center justify-content-between w-100',\r\n      )}>\r\n      <h3 className='text-truncate'>\r\n        {board.name} &gt; {list.name}\r\n      </h3>\r\n      <div className='d-flex align-items-center'>\r\n        <div className='mx-1'>\r\n          <AppIconButton smallBtn>\r\n            <div {...getRootProps({className: 'dropzone'})}>\r\n              <input {...getInputProps()} />\r\n              <IoMdAttach/>\r\n            </div>\r\n          </AppIconButton>\r\n        </div>\r\n\r\n        <div className='mx-1'>\r\n          <AppIconButton smallBtn onClick={onClickDeleteIcon}>\r\n            <AiOutlineDelete/>\r\n          </AppIconButton>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardHeader;\r\n\r\nCardHeader.propTypes = {\r\n  onClickDeleteIcon: PropTypes.func,\r\n  onAddAttachments: PropTypes.func,\r\n  list: PropTypes.object,\r\n  board: PropTypes.object,\r\n};\r\n","import React from 'react';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport {AiOutlineDelete} from 'react-icons/ai';\r\nimport {BiCloudDownload} from 'react-icons/bi';\r\nimport AppIconButton from '@crema/core/AppIconBtn';\r\nimport clsx from 'clsx';\r\nimport styles from './index.module.scss';\r\n\r\nconst CardAttachments = (props) => {\r\n  const {attachments, onDeleteAttachment} = props;\r\n\r\n  return (\r\n    <>\r\n      <h4 className={styles.scrumBoardAttachmentTitle}>\r\n        <IntlMessages id='common.attachments'/>\r\n      </h4>\r\n\r\n      {attachments ? (\r\n        <div\r\n          className={clsx(styles.scrumBoardAttachment, 'd-flex flex-wrap')}>\r\n          {attachments.map((attachment) => {\r\n            const {file} = attachment;\r\n            return (\r\n              <div\r\n                className={styles.scrumBoardAttachmentItems}\r\n                key={attachment.id}>\r\n                <div\r\n                  className={clsx(\r\n                    styles.scrumBoardAttachmentCard,\r\n                    'w-100 overflow-hidden',\r\n                  )}>\r\n                  <div className='w-100 position-relative'>\r\n                    <img\r\n                      className={clsx(\r\n                        styles.scrumBoardAttachmentImg,\r\n                        'w-100',\r\n                      )}\r\n                      src={attachment.preview}\r\n                      alt='attachment'\r\n                    />\r\n\r\n                    <div\r\n                      className={clsx(\r\n                        styles.scrumBoardAttachmentItemsAction,\r\n                        'd-flex align-items-start justify-content-end position-absolute w-100 h-100',\r\n                      )}>\r\n                      <AppIconButton smallBtn>\r\n                        <BiCloudDownload/>\r\n                      </AppIconButton>\r\n                      <AppIconButton smallBtn\r\n                                     onClick={() => onDeleteAttachment(attachment.id)}>\r\n                        <AiOutlineDelete/>\r\n                      </AppIconButton>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className={styles.scrumBoardAttachmentContent}>\r\n                        <span\r\n                          className={clsx(\r\n                            styles.scrumBoardAttachmentFileName,\r\n                            'text-truncate',\r\n                          )}>\r\n                          {file.name}\r\n                        </span>\r\n                    <div\r\n                      className={clsx(\r\n                        styles.scrumBoardAttachmentFileTime,\r\n                        'position-relative',\r\n                      )}>\r\n                          <span>\r\n                            {\r\n                              moment(file.lastModified)\r\n                                .format('ll')\r\n                                .split(',')[0]\r\n                            }\r\n                          </span>\r\n                      <span>\r\n                            <IntlMessages id='common.at'/>\r\n                          </span>\r\n                      <span>{moment(file.lastModified).format('LT')}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardAttachments;\r\n\r\nCardAttachments.defaultProps = {\r\n  attachments: [],\r\n};\r\n\r\nCardAttachments.propTypes = {\r\n  attachments: PropTypes.array,\r\n  onDeleteAttachment: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport PropTypes from 'prop-types';\r\nimport {AiOutlineDelete} from 'react-icons/ai';\r\nimport {Button, Form} from 'react-bootstrap';\r\nimport AppIconButton from '@crema/core/AppIconBtn';\r\nimport clsx from 'clsx';\r\nimport styles from './index.module.scss';\r\n\r\nconst CardCheckedList = (props) => {\r\n  const {\r\n    onAddNewCheckedItem,\r\n    checkedList,\r\n    onSetCheckedItemText,\r\n    onDeleteCheckedItem,\r\n  } = props;\r\n\r\n  return (\r\n    <div className='mb-4'>\r\n      <div\r\n        className={clsx(\r\n          styles.scrumBoardCardCheckListHeader,\r\n          'mb-3 d-flex align-items-center',\r\n        )}>\r\n        <h4>\r\n          <IntlMessages id='scrumboard.checkedLists' />\r\n        </h4>\r\n\r\n        <Button variant='primary' onClick={() => onAddNewCheckedItem()}>\r\n          <IntlMessages id='scrumboard.addNew' />\r\n        </Button>\r\n      </div>\r\n\r\n      {checkedList.map((checkedItem) => {\r\n        return (\r\n          <div\r\n            className={clsx(\r\n              styles.scrumBoardCardCheckListItem,\r\n              'd-flex align-items-center mb-3',\r\n            )}\r\n            key={checkedItem.id}>\r\n            <Form.Check\r\n              className={styles.scrumBoardCardCheckListItemCheckBox}\r\n            />\r\n            <Form.Control\r\n              className='w-100'\r\n              value={checkedItem.title}\r\n              onChange={(e) =>\r\n                onSetCheckedItemText(e.target.value, checkedItem.id)\r\n              }\r\n            />\r\n            <div className='ms-2'>\r\n              <AppIconButton smallBtn onClick={() => onDeleteCheckedItem(checkedItem.id)}>\r\n                <AiOutlineDelete />\r\n              </AppIconButton>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardCheckedList;\r\n\r\nCardCheckedList.defaultProps = {\r\n  checkedList: [],\r\n};\r\n\r\nCardCheckedList.propTypes = {\r\n  onAddNewCheckedItem: PropTypes.func,\r\n  checkedList: PropTypes.array,\r\n  onSetCheckedItemText: PropTypes.func,\r\n  onDeleteCheckedItem: PropTypes.func,\r\n};\r\n","import React, {useState} from 'react';\r\nimport {useIntl} from 'react-intl';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, Form, Image} from 'react-bootstrap';\r\nimport AppScrollbar from '@crema/core/AppScrollbar';\r\nimport {FiSend} from 'react-icons/fi';\r\nimport clsx from 'clsx';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport styles from './index.module.scss';\r\n\r\nconst CardComments = (props) => {\r\n  const {comments, onAddNewComment} = props;\r\n  const [comment, setComment] = useState('');\r\n\r\n  const onAddComment = () => {\r\n    onAddNewComment(comment);\r\n    setComment('');\r\n  };\r\n\r\n  const {messages} = useIntl();\r\n\r\n  const getCommentCell = (item, index, isPreviousSender) => {\r\n    return (\r\n      <div\r\n        className={clsx(\r\n          styles.scrumBoardCardCommentItem,\r\n          isPreviousSender && styles.scrumBoardCardCommentItemPrevious,\r\n        )}\r\n        key={index}>\r\n        {item.sender.image ? (\r\n          <Image\r\n            roundedCircle\r\n            src={item.sender.image}\r\n            className={styles.scrumBoardCardCommentItemUserAvatar}\r\n          />\r\n        ) : (\r\n          <div className={styles.scrumBoardCardCommentItemUserAvatar}>\r\n            {item.sender.name.charAt(0).toUpperCase()}\r\n          </div>\r\n        )}\r\n        <div className={styles.scrumBoardCardCommentItemUserContent}>\r\n          <span className={styles.scrumBoardCardCommentItemUserDate}>\r\n            {item.date}\r\n          </span>\r\n          <div\r\n            className={clsx(\r\n              styles.scrumBoardCardCommentArea,\r\n              'd-inline-block position-relative',\r\n            )}>\r\n            <p>{item.comment}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(styles.scrumBoardCardCommentView, 'd-flex flex-column')}>\r\n      <h4 className={clsx(styles.scrumBoardCardCommentTitle, 'mb-3')}>\r\n        <IntlMessages id='common.comments' />\r\n      </h4>\r\n        {comments && comments.length > 0 ? (\r\n          <AppScrollbar className={styles.scrumBoardCardCommentScroll}>\r\n            <div\r\n              className={clsx(styles.scrumBoardCardComment, 'position-relative')}>\r\n              {comments.map((item, index) =>\r\n                getCommentCell(\r\n                  item,\r\n                  index,\r\n                  index > 0 && comments[index - 1].sender.id === item.sender.id,\r\n                ),\r\n              )}\r\n            </div>\r\n          </AppScrollbar>\r\n        ) : null}\r\n\r\n      <div\r\n        className={clsx(\r\n          styles.scrumBoardCardCommentFooter,\r\n          'position-relative mt-auto d-flex align-items-center',\r\n        )}>\r\n        <Form.Control\r\n          className={styles.scrumBoardCardCommentTextArea}\r\n          as='textarea'\r\n          // onKeyDown={onAddComment}\r\n          value={comment}\r\n          placeholder={messages['common.pressEnter']}\r\n          onChange={(e) => setComment(e.target.value)}\r\n        />\r\n        <Button\r\n          className={clsx(\r\n            styles.btnCircle,\r\n            'd-flex flex-column align-items-center justify-content-center',\r\n          )}\r\n          variant='primary'\r\n          disabled={!comment}\r\n          onClick={onAddComment}>\r\n          <FiSend />\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardComments;\r\n\r\nCardComments.defaultProps = {\r\n  comments: [],\r\n};\r\n\r\nCardComments.propTypes = {\r\n  comments: PropTypes.array,\r\n  onAddNewComment: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport CardAttachments from './CardAttachments';\r\nimport CardCheckedList from './CardCheckedList';\r\nimport CardComments from './CardComments';\r\nimport {useIntl} from 'react-intl';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, Col, Form} from 'react-bootstrap';\r\nimport AppRowContainer from '@crema/core/AppRowContainer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {onAddNewCard, onEditCardDetails} from '../../../../../../redux/actions';\r\nimport AppScrollbar from '@crema/core/AppScrollbar';\r\nimport clsx from 'clsx';\r\nimport styles from './index.module.scss';\r\nimport Select from 'react-select';\r\n\r\nconst AddCardForm = (props) => {\r\n  const {\r\n    board,\r\n    list,\r\n    checkedList,\r\n    setCheckedList,\r\n    comments,\r\n    setComments,\r\n    authUser,\r\n    attachments,\r\n    setAttachments,\r\n    selectedMembers,\r\n    setMembersList,\r\n    selectedCard,\r\n    onCloseAddCard,\r\n    isSubmitting,\r\n  } = props;\r\n  console.log(\r\n    'selectedMembers',\r\n    selectedCard?.label.map((data) => data.id),\r\n  );\r\n  const {messages} = useIntl();\r\n\r\n  const labelList = useSelector(({scrumboardApp}) => scrumboardApp.labelList);\r\n\r\n  const memberList = useSelector(({scrumboardApp}) => scrumboardApp.memberList);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  console.log('board, list: ', board, list);\r\n  const onDeleteCheckedItem = (id) => {\r\n    const updatedList = checkedList.filter((item) => item.id !== id);\r\n    setCheckedList(updatedList);\r\n  };\r\n\r\n  const onAddNewCheckedItem = () => {\r\n    const item = {\r\n      id: Math.floor(Math.random() * 1000),\r\n      title: '',\r\n    };\r\n    const updatedList = checkedList.concat(item);\r\n    setCheckedList(updatedList);\r\n  };\r\n\r\n  const onSetCheckedItemText = (title, id) => {\r\n    const updatedList = checkedList.map((item) => {\r\n      if (item.id === id) {\r\n        item.title = title;\r\n        return item;\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n    setCheckedList(updatedList);\r\n  };\r\n\r\n  const onAddNewComment = (comment) => {\r\n    setComments(\r\n      comments.concat({\r\n        comment: comment,\r\n        sender: {\r\n          id: authUser.id,\r\n          name: authUser.displayName ? authUser.displayName : 'User',\r\n          image: authUser.photoURL,\r\n        },\r\n        date: moment().format('ll'),\r\n      }),\r\n    );\r\n  };\r\n\r\n  const onDeleteAttachment = (id) => {\r\n    const updatedAttachments = attachments.filter(\r\n      (attachment) => attachment.id !== id,\r\n    );\r\n    setAttachments(updatedAttachments);\r\n  };\r\n\r\n  function handleChange(value) {\r\n    console.log(`selected ${value}`);\r\n  }\r\n\r\n  const onFinish = (values) => {\r\n    if (selectedCard) {\r\n      const editedCard = {\r\n        ...selectedCard,\r\n        comments: comments,\r\n        ...values,\r\n        attachments: attachments,\r\n        members: selectedMembers,\r\n        label: values.members,\r\n        checkedList: checkedList.filter((item) => item.title !== ''),\r\n      };\r\n      dispatch(onEditCardDetails(board, list, editedCard));\r\n    } else {\r\n      const newCard = {\r\n        id: Math.floor(Math.random() * 1000),\r\n        attachments: attachments,\r\n        checkedList: [],\r\n        comments: comments,\r\n        ...values,\r\n        label: values.members,\r\n        members: selectedMembers,\r\n      };\r\n      dispatch(onAddNewCard(board, list, newCard));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      className='w-100 h-100 d-flex flex-column'\r\n      noValidate\r\n      autoComplete='off'\r\n      onFinish={onFinish}>\r\n      <AppScrollbar\r\n        className={clsx(\r\n          styles.scrumBoardAddCardFormScroll,\r\n          'd-flex flex-column',\r\n        )}>\r\n        <div\r\n          className={clsx(\r\n            styles.scrumBoardAddCardFormContent,\r\n            'd-flex flex-column',\r\n          )}>\r\n          <AppRowContainer gutter={8}>\r\n            <Col xs={12} md={8}>\r\n              <Form.Control\r\n                name='title'\r\n                defaultValue={selectedCard?.title}\r\n                placeholder={messages['common.title']}\r\n              />\r\n            </Col>\r\n\r\n            <Col xs={12} md={4}>\r\n              <Form.Control\r\n                type='date'\r\n                name='date'\r\n                defaultValue={\r\n                  selectedCard && selectedCard.date\r\n                    ? new Date(selectedCard.date).toISOString().split('T')[0]\r\n                    : ''\r\n                }\r\n              />\r\n            </Col>\r\n\r\n            <Col xs={12}>\r\n              <Form.Control\r\n                as='textarea'\r\n                name='desc'\r\n                defaultValue={selectedCard?.desc}\r\n                autoSize={{minRows: 3, maxRows: 5}}\r\n                placeholder={messages['common.description']}\r\n              />\r\n            </Col>\r\n\r\n            <Col xs={12} lg={6}>\r\n              <Select\r\n                defaultValue={selectedCard?.label}\r\n                isMulti\r\n                options={labelList}\r\n              />\r\n            </Col>\r\n\r\n            <Col xs={12} lg={6}>\r\n              <Select\r\n                defaultValue={selectedCard?.members}\r\n                isMulti\r\n                options={memberList}\r\n              />\r\n            </Col>\r\n\r\n            {attachments && attachments.length > 0 ? (\r\n              <Col xs={12}>\r\n                <CardAttachments\r\n                  attachments={attachments}\r\n                  onDeleteAttachment={onDeleteAttachment}\r\n                />\r\n              </Col>\r\n            ) : null }\r\n\r\n            {selectedCard ? (\r\n              <Col xs={12}>\r\n                <CardCheckedList\r\n                  onAddNewCheckedItem={onAddNewCheckedItem}\r\n                  checkedList={checkedList}\r\n                  onDeleteCheckedItem={onDeleteCheckedItem}\r\n                  onSetCheckedItemText={onSetCheckedItemText}\r\n                />\r\n              </Col>\r\n            ) : null}\r\n          </AppRowContainer>\r\n        </div>\r\n\r\n          <CardComments comments={comments} onAddNewComment={onAddNewComment}/>\r\n      </AppScrollbar>\r\n      <div className={styles.scrumBoardAddCardFormFooter}>\r\n        <Button variant='primary' onClick={onCloseAddCard}>\r\n          <IntlMessages id='common.cancel'/>\r\n        </Button>\r\n        <Button variant='primary' disabled={isSubmitting}>\r\n          <IntlMessages id='common.done'/>\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddCardForm;\r\n\r\nAddCardForm.defaultProps = {\r\n  comments: [],\r\n  attachments: [],\r\n  selectedLabels: [],\r\n  selectedMembers: [],\r\n  isSubmitting: false,\r\n};\r\n\r\nAddCardForm.propTypes = {\r\n  board: PropTypes.object.isRequired,\r\n  list: PropTypes.object.isRequired,\r\n  values: PropTypes.object.isRequired,\r\n  setFieldValue: PropTypes.func,\r\n  checkedList: PropTypes.array.isRequired,\r\n  setCheckedList: PropTypes.func,\r\n  comments: PropTypes.array,\r\n  setComments: PropTypes.func,\r\n  authUser: PropTypes.object.isRequired,\r\n  attachments: PropTypes.array,\r\n  setAttachments: PropTypes.func,\r\n  selectedLabels: PropTypes.array,\r\n  setSelectedLabels: PropTypes.func,\r\n  selectedMembers: PropTypes.array,\r\n  setMembersList: PropTypes.func,\r\n  onCloseAddCard: PropTypes.func,\r\n  selectedCard: PropTypes.object.isRequired,\r\n  isSubmitting: PropTypes.bool,\r\n};\r\n","import React, {useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {onDeleteSelectedCard} from '../../../../../../redux/actions';\r\nimport AppConfirmationModal from '@crema/core/AppConfirmationModal';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport CardHeader from './CardHeader';\r\nimport PropTypes from 'prop-types';\r\nimport AddCardForm from './AddCardForm';\r\nimport styles from './index.module.scss';\r\nimport {useAuthUser} from '@crema/utility/AuthHooks';\r\nimport {Offcanvas} from 'react-bootstrap';\r\n\r\nconst AddCard = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    handleCancel,\r\n    /*handleOk,*/ board,\r\n    list,\r\n    selectedCard,\r\n  } = props;\r\n  const dispatch = useDispatch();\r\n\r\n  const {user} = useAuthUser();\r\n\r\n  const [checkedList, setCheckedList] = useState(() =>\r\n    selectedCard ? selectedCard.checkedList : [],\r\n  );\r\n\r\n  const [isDeleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n\r\n  const [selectedMembers, setMembersList] = useState(() =>\r\n    selectedCard ? selectedCard.members : [],\r\n  );\r\n\r\n  const [selectedLabels, setSelectedLabels] = useState(() =>\r\n    selectedCard ? selectedCard.label : [],\r\n  );\r\n\r\n  const [comments, setComments] = useState(() =>\r\n    selectedCard ? selectedCard.comments : [],\r\n  );\r\n\r\n  const [attachments, setAttachments] = useState(() =>\r\n    selectedCard ? selectedCard.attachments : [],\r\n  );\r\n\r\n  const onAddAttachments = (files) => {\r\n    setAttachments([...attachments, ...files]);\r\n  };\r\n\r\n  const onDeleteCard = () => {\r\n    const boardId = board.id;\r\n    const listId = list.id;\r\n    const cardId = selectedCard.id;\r\n    dispatch(onDeleteSelectedCard(boardId, listId, cardId));\r\n    setDeleteDialogOpen(false);\r\n    handleCancel();\r\n  };\r\n\r\n  const onClickDeleteIcon = () => {\r\n    if (selectedCard) {\r\n      setDeleteDialogOpen(true);\r\n    } else {\r\n      handleCancel();\r\n    }\r\n  };\r\n  console.log('selectedCard:', selectedCard, isModalVisible);\r\n  return (\r\n    <Offcanvas\r\n      className={styles.addCardDrawer}\r\n      show={isModalVisible}\r\n      placement='end'\r\n      // onOk={handleOk}\r\n      onHide={handleCancel}>\r\n      <Offcanvas.Header className={styles.drawerHeaderWrapper} closeButton>\r\n        <CardHeader\r\n          onAddAttachments={onAddAttachments}\r\n          onClickDeleteIcon={onClickDeleteIcon}\r\n          handleCancel={handleCancel}\r\n          board={board}\r\n          list={list}\r\n        />\r\n      </Offcanvas.Header>\r\n      <Offcanvas.Body>\r\n        <AddCardForm\r\n          board={board}\r\n          list={list}\r\n          checkedList={checkedList}\r\n          handleCancel={handleCancel}\r\n          setCheckedList={setCheckedList}\r\n          comments={comments}\r\n          setComments={setComments}\r\n          authUser={user}\r\n          attachments={attachments}\r\n          setAttachments={setAttachments}\r\n          selectedLabels={selectedLabels}\r\n          setSelectedLabels={setSelectedLabels}\r\n          selectedMembers={selectedMembers}\r\n          setMembersList={setMembersList}\r\n          selectedCard={selectedCard}\r\n          onCloseAddCard={handleCancel}\r\n        />\r\n      </Offcanvas.Body>\r\n      {isDeleteDialogOpen ? (\r\n        <AppConfirmationModal\r\n          open={isDeleteDialogOpen}\r\n          onDeny={setDeleteDialogOpen}\r\n          onConfirm={onDeleteCard}\r\n          title={<IntlMessages id='scrumboard.deleteCard' />}\r\n          dialogTitle={<IntlMessages id='common.deleteItem' />}\r\n        />\r\n      ) : null}\r\n    </Offcanvas>\r\n  );\r\n};\r\n\r\nexport default AddCard;\r\n\r\nAddCard.defaultProps = {\r\n  board: null,\r\n  list: null,\r\n  selectedCard: null,\r\n};\r\n\r\nAddCard.propTypes = {\r\n  isModalVisible: PropTypes.bool.isRequired,\r\n  handleCancel: PropTypes.func.isRequired,\r\n  handleOk: PropTypes.func.isRequired,\r\n  board: PropTypes.object,\r\n  list: PropTypes.object,\r\n  selectedCard: PropTypes.object,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"scrumBoardCardDetail\":\"BoardCard_scrumBoardCardDetail__UpI7p\",\"scrumBoardCardDetailTitle\":\"BoardCard_scrumBoardCardDetailTitle__k8Zp1\",\"scrumBoardCardDetailHeader\":\"BoardCard_scrumBoardCardDetailHeader__eolVN\",\"scrumBoardCardDetailHeaderAction\":\"BoardCard_scrumBoardCardDetailHeaderAction__AUJpq\",\"scrumBoardAttachIcon\":\"BoardCard_scrumBoardAttachIcon__OXVKQ\",\"scrumBoardCardDetailDate\":\"BoardCard_scrumBoardCardDetailDate__dn+Cd\",\"scrumBoardCardDetailComment\":\"BoardCard_scrumBoardCardDetailComment__hZzGR\",\"scrumBoardLabelFlex\":\"BoardCard_scrumBoardLabelFlex__IrTOn\",\"scrumBoardLabel\":\"BoardCard_scrumBoardLabel__O2KvJ\",\"scrumBoardMemberAvatar\":\"BoardCard_scrumBoardMemberAvatar__hOdMn\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {OverlayTrigger, Tooltip, Image} from 'react-bootstrap';\r\nimport styles from './index.module.scss';\r\n\r\nconst Members = (props) => {\r\n  const {members} = props;\r\n\r\n  return (\r\n    <div className='d-flex align-items-center'>\r\n      {members.map((member) => {\r\n        return (\r\n          <OverlayTrigger\r\n            overlay={<Tooltip id='button-tooltip-2'>{member.name}</Tooltip>}>\r\n            {member.image ? (\r\n              <Image\r\n                roundedCircle\r\n                className={styles.scrumBoardMemberAvatar}\r\n                src={member.image}\r\n                alt='created'\r\n              />\r\n            ) : (\r\n              <div className={styles.scrumBoardMemberAvatar}>\r\n                {member.name[0].toUpperCase()}\r\n              </div>\r\n            )}\r\n          </OverlayTrigger>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Members;\r\n\r\nMembers.propTypes = {\r\n  members: PropTypes.array.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\r\nimport clsx from 'clsx';\r\nimport styles from './index.module.scss';\r\n\r\nconst Labels = ({labels}) => {\r\n  return (\r\n    <div\r\n      className={clsx(styles.scrumBoardLabelFlex, 'd-flex align-items-center')}>\r\n      {labels.map((label) => {\r\n        return (\r\n          <OverlayTrigger\r\n            placement='top'\r\n            key={label.id}\r\n            overlay={<Tooltip id='button-tooltip-3'>{label.name}</Tooltip>}>\r\n            <span\r\n              className={styles.scrumBoardLabel}\r\n              key={label.id}\r\n              style={{backgroundColor: label.color}}\r\n            />\r\n          </OverlayTrigger>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Labels;\r\n\r\nLabels.propTypes = {\r\n  labels: PropTypes.array.isRequired,\r\n};\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport Members from './Members';\r\nimport Labels from './Labels';\r\nimport {IoMdAttach} from 'react-icons/io';\r\nimport {MdChatBubbleOutline} from 'react-icons/md';\r\nimport AppCard from '@crema/core/AppCard';\r\nimport styles from './index.module.scss';\r\nimport clsx from 'clsx';\r\n\r\nconst BoardCard = ({\r\n  title,\r\n  attachments = [],\r\n  label = [],\r\n  members,\r\n  date,\r\n  comments,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <AppCard\r\n      className={clsx(styles.scrumBoardCardDetail, 'p-0 mb-2')}\r\n      onClick={(e) => {\r\n        console.log('clicked');\r\n        onClick(e);\r\n      }}>\r\n      <div\r\n        className={clsx(\r\n          styles.scrumBoardCardDetailHeader,\r\n          'd-flex align-items-center',\r\n        )}>\r\n        <h3 className={styles.scrumBoardCardDetailTitle}>{title}</h3>\r\n        {attachments && attachments.length > 0 ? (\r\n          <div\r\n            className={clsx(\r\n              styles.scrumBoardCardDetailHeaderAction,\r\n              'd-flex align-items-center ms-auto',\r\n            )}>\r\n            <span>{attachments.length}</span>\r\n            <IoMdAttach className={styles.scrumBoardAttachIcon} />\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      {label.length > 0 ? <Labels labels={label} /> : null}\r\n\r\n      <div className='d-flex align-items-center'>\r\n        {members.length > 0 ? <Members members={members} /> : null}\r\n\r\n        <span className={styles.scrumBoardCardDetailDate}>\r\n          {date ? moment(date).format('ll').split(',')[0] : null}\r\n        </span>\r\n        {comments && comments.length > 0 ? (\r\n          <div\r\n            className={clsx(\r\n              styles.scrumBoardCardDetailComment,\r\n              'd-flex align-items-center',\r\n            )}>\r\n            <span>{comments.length}</span>\r\n            <MdChatBubbleOutline />\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </AppCard>\r\n  );\r\n};\r\n\r\nexport default BoardCard;\r\n\r\nBoardCard.defaultProps = {\r\n  list: null,\r\n};\r\n\r\nBoardCard.propTypes = {\r\n  title: PropTypes.string,\r\n  attachments: PropTypes.array,\r\n  label: PropTypes.array,\r\n  members: PropTypes.array,\r\n  date: PropTypes.string,\r\n  comments: PropTypes.array,\r\n  onClick: PropTypes.func,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"listHeaderCard\":\"List_listHeaderCard__P87lZ\",\"scrumBoardAddBtnCard\":\"List_scrumBoardAddBtnCard__dxD60\",\"scrumBoardAddBtnCardUserAvatar\":\"List_scrumBoardAddBtnCardUserAvatar__xxhM-\",\"scrumBoardAddBtnCardUserAddIcon\":\"List_scrumBoardAddBtnCardUserAddIcon__gbYbj\",\"scrumBoardAddBtnCardUserText\":\"List_scrumBoardAddBtnCardUserText__DOyou\",\"scrumBoardListHeaderFlex\":\"List_scrumBoardListHeaderFlex__Lw-Tf\",\"scrumBoardListHeaderFlexAuto\":\"List_scrumBoardListHeaderFlexAuto__xjBRI\",\"scrumBoardListHeaderInput\":\"List_scrumBoardListHeaderInput__XMrHE\"};","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport AppConfirmationModal from '@crema/core/AppConfirmationModal';\r\nimport {HiCheck} from 'react-icons/hi';\r\nimport {CgClose} from 'react-icons/cg';\r\nimport {AiOutlineDelete, AiOutlineEdit} from 'react-icons/ai';\r\nimport AppCard from '@crema/core/AppCard';\r\nimport AppIconButton from '@crema/core/AppIconBtn';\r\nimport {Form} from 'react-bootstrap';\r\nimport clsx from 'clsx';\r\nimport styles from './index.module.scss';\r\n\r\nconst ListHeader = (props) => {\r\n  const {name, id, onDelete, updateTitle} = props;\r\n\r\n  const [isEditListName, setEditListName] = useState(false);\r\n\r\n  const [editedListName, setEditedListName] = useState('');\r\n\r\n  const [isDeleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n\r\n  const onDeleteBoardList = () => {\r\n    onDelete(id);\r\n    setDeleteDialogOpen(false);\r\n  };\r\n\r\n  const onEditButtonClick = () => {\r\n    setEditedListName(name);\r\n    setEditListName(!isEditListName);\r\n  };\r\n\r\n  const onEditListName = () => {\r\n    if (editedListName !== '') {\r\n      updateTitle(editedListName);\r\n      setEditListName(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppCard className={styles.listHeaderCard}>\r\n      <div\r\n        className={clsx(\r\n          styles.scrumBoardListHeaderFlex,\r\n          'd-flex align-items-center',\r\n        )}>\r\n        {!isEditListName ? (\r\n          <>\r\n            <h5>{name}</h5>\r\n            <div\r\n              className={clsx(\r\n                styles.scrumBoardListHeaderFlexAuto,\r\n                'd-flex align-items-center',\r\n              )}>\r\n              <AppIconButton smallBtn onClick={onEditButtonClick}>\r\n                <AiOutlineEdit />\r\n              </AppIconButton>\r\n\r\n              <AppIconButton smallBtn onClick={() => setDeleteDialogOpen(true)}>\r\n                <AiOutlineDelete />\r\n              </AppIconButton>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className={styles.scrumBoardListHeaderInput}>\r\n              <Form.Control\r\n                label={<IntlMessages id='scrumboard.listTitle' />}\r\n                value={editedListName}\r\n                onChange={(event) => setEditedListName(event.target.value)}\r\n              />\r\n            </div>\r\n            <div\r\n              className={clsx(\r\n                styles.scrumBoardListHeaderFlexAuto,\r\n                'd-flex align-items-center',\r\n              )}>\r\n              <AppIconButton smallBtn onClick={onEditListName}>\r\n                <HiCheck />\r\n              </AppIconButton>\r\n              <AppIconButton smallBtn onClick={() => setEditListName(false)}>\r\n                <CgClose />\r\n              </AppIconButton>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {isDeleteDialogOpen ? (\r\n        <AppConfirmationModal\r\n          open={isDeleteDialogOpen}\r\n          onDeny={setDeleteDialogOpen}\r\n          onConfirm={onDeleteBoardList}\r\n          title={<IntlMessages id='scrumboard.deleteMessage' />}\r\n          dialogTitle={<IntlMessages id='common.deleteItem' />}\r\n        />\r\n      ) : null}\r\n    </AppCard>\r\n  );\r\n};\r\n\r\nexport default ListHeader;\r\n\r\nListHeader.propTypes = {\r\n  boardId: PropTypes.string.isRequired,\r\n  name: PropTypes.string,\r\n  id: PropTypes.string,\r\n  onDelete: PropTypes.func,\r\n  updateTitle: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport {MdAdd} from 'react-icons/md';\r\nimport AppCard from '@crema/core/AppCard';\r\nimport clsx from 'clsx';\r\nimport styles from './index.module.scss';\r\n\r\nconst AddCardButton = (props) => {\r\n  return (\r\n    <AppCard\r\n      className={styles.scrumBoardAddBtnCard}\r\n      onClick={() => props.t(props.laneId)}>\r\n      <div className='d-flex align-items-center'>\r\n        <div\r\n          className={clsx(\r\n            styles.scrumBoardAddBtnCardUserAvatar,\r\n            'd-flex align-items-center flex-column justify-content-center',\r\n          )}>\r\n          <MdAdd className={styles.scrumBoardAddBtnCardUserAddIcon} />\r\n        </div>\r\n        <div className={styles.scrumBoardAddBtnCardUserText}>\r\n          <IntlMessages id='scrumboard.addACard' />\r\n        </div>\r\n      </div>\r\n    </AppCard>\r\n  );\r\n};\r\n\r\nexport default AddCardButton;\r\n\r\nAddCardButton.propTypes = {\r\n  t: PropTypes.func,\r\n  laneId: PropTypes.number.isRequired,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"scrumBoardView\":\"BoardDetail_scrumBoardView__qEi0f\",\"scrumBoardDetailTitle\":\"BoardDetail_scrumBoardDetailTitle__4i1nb\",\"scrumBoardAddListCard\":\"BoardDetail_scrumBoardAddListCard__okAcT\",\"scrumBoardAddIcon\":\"BoardDetail_scrumBoardAddIcon__MtzhZ\",\"scrumBoardAddText\":\"BoardDetail_scrumBoardAddText__1osWh\",\"scrumBoardAddAlose\":\"BoardDetail_scrumBoardAddAlose__FgMv6\",\"scrumBoardAddListBtn\":\"BoardDetail_scrumBoardAddListBtn__FsQvQ\",\"scrumBoardAddListFormFiled\":\"BoardDetail_scrumBoardAddListFormFiled__1MFR2\"};","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport {RiCloseLine} from 'react-icons/ri';\r\nimport {MdAdd} from 'react-icons/md';\r\nimport {Button, Form} from 'react-bootstrap';\r\nimport AppCard from '@crema/core/AppCard';\r\nimport {useIntl} from 'react-intl';\r\nimport AppIconButton from '@crema/core/AppIconBtn';\r\nimport clsx from 'clsx';\r\nimport styles from './index.module.scss';\r\n\r\nconst AddNewList = (props) => {\r\n  const {onAdd, onCancel} = props;\r\n\r\n  const [listName, setListName] = useState('');\r\n\r\n  const onClickAddButton = () => {\r\n    if (listName !== '') {\r\n      onAdd(listName);\r\n      setListName('');\r\n    }\r\n  };\r\n\r\n  const {messages} = useIntl();\r\n\r\n  return (\r\n    <AppCard className={clsx(styles.scrumBoardAddListCard, 'p-0')}>\r\n      <div className='d-flex align-items-center'>\r\n        <span\r\n          className={clsx(\r\n            styles.scrumBoardAddIcon,\r\n            'd-flex align-items-center justify-content-center',\r\n          )}>\r\n          <MdAdd />\r\n        </span>\r\n        <p className={clsx(styles.scrumBoardAddText, 'mb-0')}>\r\n          <IntlMessages id='scrumboard.addAList' />\r\n        </p>\r\n        <span className={styles.scrumBoardAddAlose}>\r\n          <AppIconButton onClick={onCancel} smallBtn>\r\n            <RiCloseLine />\r\n          </AppIconButton>\r\n        </span>\r\n      </div>\r\n      <div\r\n        className={clsx(\r\n          styles.scrumBoardAddListFormFiled,\r\n          'd-flex flex-column align-items-start',\r\n        )}>\r\n        <Form.Control\r\n          placeholder={messages['scrumboard.cardTitle']}\r\n          value={listName}\r\n          onChange={(event) => setListName(event.target.value)}\r\n        />\r\n        <Button\r\n          variant='primary'\r\n          className={styles.scrumBoardAddListBtn}\r\n          onClick={() => onClickAddButton()}>\r\n          <IntlMessages id='common.add' />\r\n        </Button>\r\n      </div>\r\n    </AppCard>\r\n  );\r\n};\r\n\r\nexport default AddNewList;\r\n\r\nAddNewList.propTypes = {\r\n  onCancel: PropTypes.func,\r\n  onAdd: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport {MdAdd} from 'react-icons/md';\r\nimport AppCard from '@crema/core/AppCard';\r\nimport clsx from 'clsx';\r\nimport styles from './index.module.scss';\r\n\r\nconst NewListButton = (props) => {\r\n  const {onClick} = props;\r\n\r\n  return (\r\n    <AppCard className={clsx(styles.scrumBoardAddListCard, 'p-0')}>\r\n      <div className='d-flex align-items-center'>\r\n        <span\r\n          className={clsx(\r\n            styles.scrumBoardAddIcon,\r\n            'd-flex align-items-center justify-content-center',\r\n          )}\r\n          onClick={onClick}>\r\n          <MdAdd />\r\n        </span>\r\n        <p className={clsx(styles.scrumBoardAddText, 'mb-0')}>\r\n          <IntlMessages id='scrumboard.addAList' />\r\n        </p>\r\n      </div>\r\n    </AppCard>\r\n  );\r\n};\r\n\r\nexport default NewListButton;\r\n\r\nNewListButton.propTypes = {\r\n  onClick: PropTypes.func,\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {\r\n  onAddNewList,\r\n  onDeleteSelectedList,\r\n  onEditBoardList,\r\n  onUpdateCardCategory,\r\n} from '../../../../redux/actions';\r\nimport AddCard from './List/AddCard';\r\nimport AppsContent from '@crema/core/AppsContainer/AppsContent';\r\nimport {useDispatch} from 'react-redux';\r\nimport Board from 'react-trello';\r\nimport BoardCard from './List/BoardCard';\r\nimport ListHeader from './List/ListHeader';\r\nimport AddCardButton from './List/AddCardButton';\r\nimport AddNewList from './AddNewList';\r\nimport NewListButton from './NewListButton';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './index.module.scss';\r\n\r\nconst BoardDetailView = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [list, setList] = useState(null);\r\n\r\n  const [isAddCardOpen, setAddCardOpen] = useState(false);\r\n\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const {boardDetail} = props;\r\n\r\n  const getBoardData = () => {\r\n    return {\r\n      ...boardDetail,\r\n      lanes: boardDetail.list,\r\n    };\r\n  };\r\n\r\n  const [boardData, setBoardData] = useState(getBoardData());\r\n\r\n  useEffect(() => {\r\n    setBoardData(getBoardData());\r\n  }, [boardDetail]);\r\n\r\n  const shouldReceiveNewData = (nextData) => {\r\n    setBoardData(nextData);\r\n  };\r\n\r\n  const onCloseAddCard = () => {\r\n    setAddCardOpen(false);\r\n  };\r\n\r\n  const onClickAddCard = (listId) => {\r\n    console.log('id', listId);\r\n    setList(boardData.lanes.find((item) => item.id === listId));\r\n    setSelectedCard(null);\r\n    setAddCardOpen(true);\r\n  };\r\n\r\n  const onAddList = (name) => {\r\n    dispatch(onAddNewList(boardDetail.id, {name}));\r\n  };\r\n\r\n  const getCardById = (lane, cardId) =>\r\n    lane.cards.find((item) => item.id === cardId);\r\n\r\n  const onEditCardDetail = (cardId) => {\r\n    const selectedList = boardData.lanes.find((item) => {\r\n      const correctCard = item.cards.find((card) => card.id === cardId);\r\n      if (correctCard) return item;\r\n    });\r\n    const selectedCard = getCardById(selectedList, cardId);\r\n    setSelectedCard(selectedCard);\r\n    setList(selectedList);\r\n    setAddCardOpen(true);\r\n  };\r\n\r\n  const handleDragCard = (\r\n    cardId,\r\n    sourceLaneId,\r\n    targetLaneId,\r\n    position,\r\n    cardDetails,\r\n  ) => {\r\n    if (sourceLaneId !== targetLaneId) {\r\n      const boardId = boardDetail.id;\r\n      dispatch(\r\n        onUpdateCardCategory(\r\n          cardDetails.id,\r\n          sourceLaneId,\r\n          targetLaneId,\r\n          position,\r\n          boardId,\r\n        ),\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppsContent fullView>\r\n      <div\r\n        className={styles.scrumBoardView}>\r\n      <Board\r\n        style={{background: '#F4F7FE'}}\r\n        editable\r\n        canAddLanes\r\n        data={boardData}\r\n        onDataChange={shouldReceiveNewData}\r\n        handleDragEnd={handleDragCard}\r\n        onCardAdd={(card, laneId) => {\r\n          onClickAddCard(laneId);\r\n        }}\r\n        onCardClick={(cardId, metadata, laneId) => {\r\n          onEditCardDetail(cardId, laneId);\r\n        }}\r\n        onLaneAdd={(name) => onAddList(name)}\r\n        onLaneUpdate={(laneId, data) => {\r\n          const lane = boardData.lanes.find((item) => item.id === laneId);\r\n          dispatch(\r\n            onEditBoardList(boardDetail.id, {...lane, name: data.title}),\r\n          );\r\n        }}\r\n        onLaneDelete={(laneId) =>\r\n          dispatch(onDeleteSelectedList(boardDetail.id, laneId))\r\n        }\r\n        t={(listId) => onClickAddCard(listId)}\r\n        components={{\r\n          Card: BoardCard,\r\n          LaneHeader: ListHeader,\r\n          AddCardLink: AddCardButton,\r\n          NewCardForm: AddCard,\r\n          NewLaneForm: AddNewList,\r\n          NewLaneSection: NewListButton,\r\n        }}\r\n      />\r\n      </div>\r\n      {isAddCardOpen ? (\r\n        <AddCard\r\n          isModalVisible={isAddCardOpen}\r\n          handleCancel={onCloseAddCard}\r\n          list={list}\r\n          board={boardDetail}\r\n          selectedCard={selectedCard}\r\n          setSelectedCard={setSelectedCard}\r\n        />\r\n      ) : null}\r\n    </AppsContent>\r\n  );\r\n};\r\n\r\nexport default BoardDetailView;\r\n\r\nBoardDetailView.propTypes = {\r\n  boardDetail: PropTypes.object,\r\n};\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport AppsContainer from '@crema/core/AppsContainer';\r\nimport BoardDetailView from './BoardDetailView';\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\nimport {\r\n  onGetBoardDetail,\r\n  onNullifyBoardDetail,\r\n} from '../../../../redux/actions/ScrumboardApp';\r\nimport styles from './index.module.scss';\r\n\r\nconst BoardDetail = () => {\r\n  const history = useHistory();\r\n  const boardDetail = useSelector(\r\n    ({scrumboardApp}) => scrumboardApp.boardDetail,\r\n  );\r\n  const dispatch = useDispatch();\r\n  const {pathname} = useLocation();\r\n\r\n  useEffect(() => {\r\n    const path = pathname.split('/');\r\n    const id = path[path.length - 1];\r\n    dispatch(onGetBoardDetail(id));\r\n    return () => {\r\n      dispatch(onNullifyBoardDetail());\r\n    };\r\n  }, [dispatch, pathname]);\r\n\r\n  const onGoToBoardList = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  if (!boardDetail) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <AppsContainer\r\n      fullView\r\n      noContentAnimation\r\n      title={\r\n        <>\r\n          <span\r\n            className={styles.scrumBoardDetailTitle}\r\n            onClick={onGoToBoardList}>\r\n            Scrum Board\r\n          </span>\r\n          &gt; {boardDetail.name}\r\n        </>\r\n      }>\r\n      <BoardDetailView boardDetail={boardDetail} />\r\n    </AppsContainer>\r\n  );\r\n};\r\n\r\nexport default BoardDetail;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"scrumBoardHeader\":\"BoardList_scrumBoardHeader__eVwg9\",\"scrumBoardAddCard\":\"BoardList_scrumBoardAddCard__bO0Kh\",\"cardBody\":\"BoardList_cardBody__mhgQg\",\"scrumBoardAddCardIcon\":\"BoardList_scrumBoardAddCardIcon__qF+qa\",\"scrumBoardCardText\":\"BoardList_scrumBoardCardText__FGxf4\",\"scrumBoardCard\":\"BoardList_scrumBoardCard__fRb4S\",\"scrumBoardListIcon\":\"BoardList_scrumBoardListIcon__UT3BM\",\"scrumAddBoardCardFooterBtn\":\"BoardList_scrumAddBoardCardFooterBtn__jOcdB\"};","import React, {useState} from 'react';\r\n\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, Form, Modal} from 'react-bootstrap';\r\nimport AppCard from '@crema/core/AppCard';\r\nimport {useIntl} from 'react-intl';\r\nimport styles from './index.module.scss';\r\n\r\nconst AddNewBoard = ({\r\n  isModalVisible,\r\n  handleCancel,\r\n  onAddBoard,\r\n  selectedBoard,\r\n  handleOk,\r\n}) => {\r\n  const [boardName, setBoardName] = useState(() =>\r\n    selectedBoard ? selectedBoard.name : '',\r\n  );\r\n\r\n  const onClickAddButton = () => {\r\n    if (boardName !== '') {\r\n      onAddBoard(boardName);\r\n      setBoardName('');\r\n      handleCancel();\r\n    }\r\n  };\r\n  const {messages} = useIntl();\r\n\r\n  return (\r\n    <Modal\r\n      show={isModalVisible}\r\n      // onOk={handleOk}\r\n      centered\r\n      onHide={handleCancel}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{messages['scrumboard.addNewBoard']}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <AppCard cardBodyClass='p-0'>\r\n          <Form.Control\r\n            placeholder='Basic usage'\r\n            label={<IntlMessages id='scrumboard.boardTitle' />}\r\n            value={boardName}\r\n            onChange={(event) => setBoardName(event.target.value)}\r\n          />\r\n        </AppCard>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button\r\n          type='primary'\r\n          className={styles.scrumAddBoardCardFooterBtn}\r\n          onClick={onClickAddButton}>\r\n          <IntlMessages id='common.add' />\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddNewBoard;\r\n\r\nAddNewBoard.defaultProps = {\r\n  selectedBoard: null,\r\n};\r\n\r\nAddNewBoard.propTypes = {\r\n  isModalVisible: PropTypes.bool.isRequired,\r\n  handleCancel: PropTypes.func.isRequired,\r\n  onAddBoard: PropTypes.func,\r\n  handleOk: PropTypes.func,\r\n  selectedBoard: PropTypes.node,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {BsCardList} from 'react-icons/bs';\r\nimport {MdEdit} from 'react-icons/md';\r\nimport AppCard from '@crema/core/AppCard';\r\nimport clsx from 'clsx';\r\nimport styles from './index.module.scss';\r\n\r\nconst BoardItem = ({board, onEditButtonClick, onViewBoardDetail}) => {\r\n  return (\r\n    <AppCard\r\n      className={clsx(styles.scrumBoardCard, 'd-flex flex-column text-center')}\r\n      key={board.id}\r\n      onClick={() => onViewBoardDetail(board)}>\r\n      <div\r\n        className={clsx(\r\n          styles.cardBody,\r\n          'd-flex flex-column text-center align-items-center justify-content-center h-100',\r\n        )}>\r\n        <div\r\n          className={clsx(\r\n            styles.scrumBoardListIcon,\r\n            'd-flex align-items-center',\r\n          )}>\r\n          <BsCardList />\r\n          <MdEdit onClick={() => onEditButtonClick(board)} />\r\n        </div>\r\n        <p className={styles.scrumBoardCardText}>{board.name}</p>\r\n        <span onClick={(event) => event.stopPropagation()} />\r\n      </div>\r\n    </AppCard>\r\n  );\r\n};\r\n\r\nexport default BoardItem;\r\n\r\nBoardItem.propTypes = {\r\n  board: PropTypes.object.isRequired,\r\n  onEditButtonClick: PropTypes.func.isRequired,\r\n  onViewBoardDetail: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport {MdAdd} from 'react-icons/md';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport PropTypes from 'prop-types';\r\nimport AppCard from '@crema/core/AppCard';\r\nimport styles from './index.module.scss';\r\nimport clsx from 'clsx';\r\n\r\nconst AddBoardButton = ({onAddButtonClick}) => {\r\n  return (\r\n    <AppCard\r\n      className={styles.scrumBoardAddCard}\r\n      onClick={() => onAddButtonClick()}>\r\n      <div\r\n        className={clsx(\r\n          styles.cardBody,\r\n          'd-flex flex-column text-center align-items-center justify-content-center h-100',\r\n        )}>\r\n        <span className={styles.scrumBoardAddCardIcon}>\r\n          <MdAdd />\r\n        </span>\r\n        <p className={styles.scrumBoardCardText}>\r\n          <IntlMessages id='scrumboard.addNewBoard' />\r\n        </p>\r\n      </div>\r\n    </AppCard>\r\n  );\r\n};\r\n\r\nexport default AddBoardButton;\r\n\r\nAddBoardButton.propTypes = {\r\n  onAddButtonClick: PropTypes.func,\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n  onAddNewBoard,\r\n  onEditBoardDetail,\r\n  onGetBoardList,\r\n} from '../../../../redux/actions';\r\nimport {useHistory} from 'react-router-dom';\r\nimport AddNewBoard from './AddNewBoard';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport BoardItem from './BoardItem';\r\nimport AddBoardButton from './AddBoardButton';\r\nimport AppInfoView from '@crema/core/AppInfoView';\r\nimport styles from './index.module.scss';\r\nimport AppRowContainer from '@crema/core/AppRowContainer';\r\nimport {Col} from 'react-bootstrap';\r\nimport clsx from 'clsx';\r\n\r\nconst BoardList = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const boardList = useSelector(({scrumboardApp}) => scrumboardApp.boardList);\r\n\r\n  const [selectedBoard, setSelectedBoard] = useState(null);\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    dispatch(onGetBoardList());\r\n  }, [dispatch]);\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const onEditButtonClick = (board) => {\r\n    setSelectedBoard(board);\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const onAddBoard = (name) => {\r\n    if (selectedBoard) {\r\n      const board = {...selectedBoard, name};\r\n      dispatch(onEditBoardDetail(board));\r\n    } else {\r\n      dispatch(onAddNewBoard({name}));\r\n    }\r\n  };\r\n\r\n  const onViewBoardDetail = (board) => {\r\n    history.push(`/apps/scrum-board/${board.id}`);\r\n  };\r\n\r\n  const showModal = () => {\r\n    setSelectedBoard(null);\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className='pt-3 d-flex flex-column'>\r\n        <div className={clsx(styles.scrumBoardHeader, 'text-center')}>\r\n          <h2>\r\n            <IntlMessages id='scrumboard.scrumboardApp' />\r\n          </h2>\r\n        </div>\r\n        <AppRowContainer className='justify-content-center'>\r\n          {boardList && boardList.length > 0\r\n            ? boardList.map((board) => {\r\n                return (\r\n                  <Col xs={12} sm={6} md={4} lg={3} key={board.id}>\r\n                    <BoardItem\r\n                      board={board}\r\n                      onEditButtonClick={onEditButtonClick}\r\n                      onViewBoardDetail={onViewBoardDetail}\r\n                    />\r\n                  </Col>\r\n                );\r\n              })\r\n            : null}\r\n          <Col xs={12} sm={6} md={4} lg={3}>\r\n            <AddBoardButton onAddButtonClick={showModal} />\r\n          </Col>\r\n        </AppRowContainer>\r\n      </div>\r\n\r\n      {isModalVisible ? (\r\n        <AddNewBoard\r\n          isModalVisible={isModalVisible}\r\n          handleCancel={handleCancel}\r\n          onAddBoard={onAddBoard}\r\n          handleOk={handleOk}\r\n          selectedBoard={selectedBoard}\r\n        />\r\n      ) : null}\r\n      <AppInfoView />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BoardList;\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {onGetMemberList, onGetScrumLabelList} from '../../../redux/actions';\r\nimport BoardDetail from './BoardDetail';\r\nimport BoardList from './BoardList';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nconst ScrumBoard = () => {\r\n  const dispatch = useDispatch();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    dispatch(onGetScrumLabelList());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch(onGetMemberList());\r\n  }, [dispatch]);\r\n\r\n  const onGetMainComponent = () => {\r\n    if (params.id) {\r\n      return <BoardDetail />;\r\n    } else {\r\n      return <BoardList />;\r\n    }\r\n  };\r\n\r\n  return <>{onGetMainComponent()}</>;\r\n};\r\n\r\nexport default ScrumBoard;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"row\":\"AppRowContainer_row__lSYCd\"};","// extracted by mini-css-extract-plugin\nexport default {\"appsWrap\":\"AppsContainer_appsWrap__zvw-4\",\"appsWrapHeader\":\"AppsContainer_appsWrapHeader__szimU\",\"menuBtn\":\"AppsContainer_menuBtn__hKXrB\",\"appsContainer\":\"AppsContainer_appsContainer__ASz5t\",\"appMainFixedFooter\":\"AppsContainer_appMainFixedFooter__1JfeO\",\"appMainFooter\":\"AppsContainer_appMainFooter__qShEH\",\"appsMainContent\":\"AppsContainer_appsMainContent__59PsM\",\"appsMainContentFull\":\"AppsContainer_appsMainContentFull__WJWdT\",\"appsContentContainer\":\"AppsContainer_appsContentContainer__ild+C\",\"fullView\":\"AppsContainer_fullView__vSr4E\",\"scrum-absolute\":\"AppsContainer_scrum-absolute__VqjBV\",\"react-trello-board\":\"AppsContainer_react-trello-board__OycKh\",\"scrum-row\":\"AppsContainer_scrum-row__PRpkM\",\"smooth-dnd-container\":\"AppsContainer_smooth-dnd-container__pGBR-\",\"horizontal\":\"AppsContainer_horizontal__f1Ksg\",\"scrum-col\":\"AppsContainer_scrum-col__Gi57q\",\"react-trello-lane\":\"AppsContainer_react-trello-lane__sS-jH\",\"scrum-board-list-header-card\":\"AppsContainer_scrum-board-list-header-card__+vk2n\",\"scroll-scrum-item\":\"AppsContainer_scroll-scrum-item__JP4Va\",\"vertical\":\"AppsContainer_vertical__KLU+e\",\"appsFooter\":\"AppsContainer_appsFooter__hOjz4\",\"appsHeader\":\"AppsContainer_appsHeader__bf5mr\",\"appsSidebar\":\"AppsContainer_appsSidebar__ZPAXS\",\"card\":\"AppsContainer_card__tJ4dA\",\"heightFull\":\"AppsContainer_heightFull__GtgHE\",\"appsOffcanvas\":\"AppsContainer_appsOffcanvas__psiRa\"};"],"names":["AppCard","title","footer","children","className","titleClass","actionClass","footerClass","cardBodyClass","cardHeaderClass","action","heightFull","cardImg","rest","Card","clsx","styles","Img","variant","src","Header","Title","href","Body","Footer","defaultProps","AppConfirmationModal","open","onDeny","onConfirm","modalTitle","paragraph","show","onHide","centered","closeButton","onClick","useSelector","common","loading","error","displayMessage","AppRow","props","row","others","animateStyle","flexDirection","component","type","ease","height","AppsContent","isDetailView","fullView","appsContentContainer","isAppDrawerOpen","setAppDrawerOpen","sidebarContent","appsSidebar","Offcanvas","appsOffcanvas","closeIcon","card","AppsContainer","useState","useLayoutContext","navStyle","noContentAnimation","appsWrap","appsWrapHeader","appsWrapHeaderFull","Button","menuBtn","style","zIndex","overflow","appsContainer","appsMainContent","appsMainContentFull","cardStyle","minHeight","AppInfoView","onClickDeleteIcon","board","list","onAddAttachments","useDropzone","accept","onDrop","acceptedFiles","files","map","file","id","Math","floor","random","preview","URL","createObjectURL","getRootProps","getInputProps","name","smallBtn","CardAttachments","attachments","onDeleteAttachment","IntlMessages","attachment","alt","moment","lastModified","format","split","CardCheckedList","onAddNewCheckedItem","checkedList","onSetCheckedItemText","onDeleteCheckedItem","checkedItem","Form","Check","Control","value","onChange","e","target","CardComments","comments","onAddNewComment","comment","setComment","messages","useIntl","length","AppScrollbar","item","index","isPreviousSender","sender","image","Image","roundedCircle","charAt","toUpperCase","date","getCommentCell","as","placeholder","disabled","AddCardForm","setCheckedList","setComments","authUser","setAttachments","selectedMembers","selectedCard","setMembersList","onCloseAddCard","isSubmitting","console","log","label","data","labelList","scrumboardApp","memberList","dispatch","useDispatch","noValidate","autoComplete","onFinish","values","editedCard","members","filter","onEditCardDetails","newCard","onAddNewCard","AppRowContainer","gutter","Col","xs","md","defaultValue","Date","toISOString","desc","autoSize","minRows","maxRows","lg","isMulti","options","updatedAttachments","updatedList","concat","displayName","photoURL","selectedLabels","AddCard","isModalVisible","handleCancel","user","useAuthUser","isDeleteDialogOpen","setDeleteDialogOpen","setSelectedLabels","placement","boardId","listId","cardId","onDeleteSelectedCard","dialogTitle","member","OverlayTrigger","overlay","Tooltip","labels","backgroundColor","color","BoardCard","onDelete","updateTitle","isEditListName","setEditListName","editedListName","setEditedListName","event","t","laneId","onAdd","onCancel","listName","setListName","setList","isAddCardOpen","setAddCardOpen","setSelectedCard","boardDetail","getBoardData","lanes","boardData","setBoardData","useEffect","onClickAddCard","find","background","editable","canAddLanes","onDataChange","nextData","handleDragEnd","sourceLaneId","targetLaneId","position","cardDetails","onUpdateCardCategory","onCardAdd","onCardClick","metadata","selectedList","cards","lane","getCardById","onEditCardDetail","onLaneAdd","onAddNewList","onAddList","onLaneUpdate","onEditBoardList","onLaneDelete","onDeleteSelectedList","components","LaneHeader","ListHeader","AddCardLink","AddCardButton","NewCardForm","NewLaneForm","AddNewList","NewLaneSection","NewListButton","history","useHistory","pathname","useLocation","path","onGetBoardDetail","onNullifyBoardDetail","goBack","AddNewBoard","onAddBoard","selectedBoard","handleOk","boardName","setBoardName","Modal","onEditButtonClick","onViewBoardDetail","stopPropagation","onAddButtonClick","boardList","setSelectedBoard","setIsModalVisible","onGetBoardList","push","sm","onEditBoardDetail","onAddNewBoard","params","useParams","onGetScrumLabelList","onGetMemberList"],"sourceRoot":""}